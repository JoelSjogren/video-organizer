###################################
#  SConscript                     #
#                                 #
#  Builds vorg, test-suite.       #
###################################
import subprocess
import os
import random
### generate build.cpp ###
build_no = "%04x" % random.getrandbits(16)
build_no_txt = 'build_no.txt'
build_no_cpp = '../src/build_no.cpp'
if os.path.isfile(build_no_txt): os.remove(build_no_txt)
if os.path.isfile(build_no_cpp): os.remove(build_no_cpp)
with open(build_no_txt, 'w') as build_no_file:
    build_no_file.write(build_no)
with open(build_no_cpp, 'w') as build_no_file:
	comment = "// This file is automatically generated.\n" + \
		"// Do not modify it or your changes will be lost.\n"
	command = ['xxd', '-i', build_no_txt]
	proc = subprocess.Popen(command, stdout=subprocess.PIPE)
	array = proc.stdout.read()
	build_no_file.write(comment + array)
### generate help.cpp ###
help_cpp = '../src/help.cpp'
if os.path.isfile(help_cpp): os.remove(help_cpp)
with open(help_cpp, 'w') as help_file:
	comment = "// This file is automatically generated.\n" + \
		"// Do not modify it or your changes will be lost.\n"
	command = ['xxd', '-i', '../HELP.md']
	proc = subprocess.Popen(command, stdout=subprocess.PIPE)
	array = proc.stdout.read()
	help_file.write(comment + array)	

### what to link ###
env = Environment()
link = env.Object(
    ['args.cpp', 'args_test.cpp', 'build_no.cpp', 'console.cpp',
     'filelist.cpp', 'filelist_test.cpp', 'fileman.cpp',
     'help.cpp', 'organizer.cpp', 'organizer_test.cpp',
     'parser.cpp', 'parser_test.cpp', 'parser_test_data.cpp',
     'test.cpp', 'tinyxml2.cpp', 'organizer_test_data.cpp',
     'fileman_test.cpp'])
env['LIBS'] = ['boost_regex', 'boost_filesystem', 'boost_system']
env['CXXFLAGS'] = ['-Wall']

### build ###
vorg = env.Program('../vorg', ['vorg.cpp'] + link)
testsuite = env.Program('../test-suite', ['testsuite.cpp'] + link)

